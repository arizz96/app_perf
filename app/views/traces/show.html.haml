/ Content Header (Page header)
%style
  - @layer_names.each do |layer_name|
    - color = "#{Digest::MD5.hexdigest(layer_name)[0..5]}"
    = ".app-perf-color-#{layer_name} { background-color: ##{color}; border-color: ##{darken_hex(color)}; }"
  = ".span-error { border-color: darkred !important; border: 2px; }"

%section.content-header
  %h1
    Trace Details
  %ol.breadcrumb
    %li= link_to "Traces", dynamic_url(@current_application, :traces)
    %li.active= @trace.root_span.tag("http.url")
%section.content
  .row
    .col-lg-12.connectedSortable
      .box
        .box-header
          %h3.box-title
            Transaction Span #{@trace.duration.to_f}
        .box-body
          #visualization{:data => { :span_id => @span ? @span.id : nil }}
          :javascript
            function setSelection(span_id) {
              if(span_id) {
                $("#span").load("/applications/#{@current_application.id}/#{@span_url_root}/spans/" + span_id);
              }
              else {
                $("#span").load("/applications/#{@current_application.id}/#{@span_url_root}/traces/#{@trace.trace_key}/database");
              }
            }
            groups = []
            items = []
            group_index = 0
            item_index = 0

            var groups = new vis.DataSet(#{@groups.to_json.html_safe});
            var items = new vis.DataSet(#{@items.to_json.html_safe});

            var container = document.getElementById('visualization');
            var options = {
              groupOrder: function (a, b) {
                return a.value - b.value;
              },
              order: function(a, b) {
                return a.id - b.id;
              },
              margin: {
                  item: {
                      horizontal: -1
                  }
              },
              format: {
                minorLabels: {
                  millisecond:'SSS',
                  second:     's',
                  minute:     'h:mm A',
                  hour:       'h:mm A',
                  weekday:    'ddd D',
                  day:        'D',
                  month:      'MMM',
                  year:       'YYYY'
                },
                majorLabels: {
                  millisecond:'h:mm:ss A',
                  second:     'D MMMM h:mm A',
                  minute:     'ddd D MMMM',
                  hour:       'ddd D MMMM',
                  weekday:    'MMMM YYYY',
                  day:        'MMMM YYYY',
                  month:      'YYYY',
                  year:       ''
                }
              }
            };

            var timeline = new vis.Timeline(container);
            timeline.on('select', function (properties) {
              setSelection(properties.items[0]);
            });
            timeline.setOptions(options);
            timeline.setGroups(groups);
            timeline.setItems(items);

            $(document).ready(function() {
              var span_id = $("#visualization").data("span-id");
              if(span_id) {
                timeline.setSelection([span_id]);
                setSelection(span_id);
              }
            });
            $(document).on("click", ".db-statement-span", function(e) {
              e.preventDefault();
              var span_id = $(this).data("span-id");
              if(span_id) {
                timeline.setSelection([span_id]);
                setSelection(span_id);
              }
            });
            $(document).on("click", ".close-span-detail", function(e) {
              e.preventDefault();
              timeline.setSelection([]);
              setSelection();
            });
      #span= render "database"
